@using System.Globalization
@using System.Text.RegularExpressions
@using DSCore.Ini
@using DSCore.Utilities
@model Weapon
@{
    List<Infocard> Infocards = (List<Infocard>)ViewBag.Infocards;
    Dictionary<Base, decimal> Sellpoints = ViewBag.Sellpoints;
    List<System> systems = ViewBag.Systems;
    ViewData["Title"] = Infocards.First(x => x.Key == Model.Name).Value;
}



<div class="text-center">
    <div class="window window-cell">
        <h2>@ViewData["Title"]</h2>
        <br/>
        <br/>
        <h1>TODO: Add icon</h1>

        @Html.Raw(Infocards.First(x => x.Key == Model.Infocard).Value)
    </div>
    
    @{
        float explosionHull = 0, explosionShield = 0;
        if (Model.Munition.Explosion != null)
        {
            explosionHull = Model.Munition.Explosion.HullDamage;
            explosionShield = Model.Munition.Explosion.EnergyDamage;
        }

        string munStuff = "";
        munStuff += "<span>Is Dumbfire Projectile: </span>" + (Model.Munition.IsSeeking ? "No" : "Yes") + "<br/>";
        munStuff += "<span>Projectile Lifetime: </span>" + Model.Munition.Lifetime.ToString("N0") + (Model.Munition.Lifetime == 1 ? " Second" : " Seconds") + "<br/>";
        munStuff += "<span>Projectile Speed: </span>" + Model.MuzzleVelocity.ToString("N0") + " m/s<br/>";
        munStuff += "<span>Range: </span>" + Model.MuzzleVelocity * Model.Munition.Lifetime + " m<br/>";
        if (Model.Munition.Explosion != null)
        {
            munStuff += "<span>Is Cruise Disrupter: </span>" + (Model.Munition.IsCruiseDistupter ? "Yes" : "No") + "<br/>";
            munStuff += "<span>Explosion Radius: </span>" + Model.Munition.Explosion.Radius + "<br/>";
            munStuff += "<span>Explosion Impulse: </span>" + Model.Munition.Explosion.Impulse + "<br/>";
            munStuff += "<span>Explosion Strength: </span>" + Model.Munition.Explosion.Strength + "<br/>";
        }
    }
    
    <div class="window window-cell">
        <h2>@ViewData["Title"]</h2>
        <div class="text-left">
            <p>
                <span>Nickname: </span> @Model.Nickname <br/>
                <span>Price: </span> @Model.Price.ToString("C0", CultureInfo.CreateSpecificCulture("en-US")) Credits<br/>
                <span>Weapon Type: </span>@(Convert.ToString(ViewData["Title"]).ToLower().Contains("nomad") ? "Nomad" : Model.Munition.Explosion == null ? TypeFunctions.EnumToString(Model.Munition.WeaponType) : "Explosive")<br/>
                <span>Hull Damage: </span>@((Model.Munition.HullDamage + explosionHull).ToString("N0"))<br/>
                <span>Shield Damage: </span>@((Model.Munition.ShieldDamage + Model.Munition.EnegryDamage + explosionShield).ToString("N0"))<br/>
                <span>Energy Damage: </span>@((Model.Munition.EnegryDamage + explosionShield).ToString("N0"))<br/>
                <span>Gun Hitpoints: </span> @Model.Hitpoints <br/>
                <span>Has Forced Orientation: </span> @(Model.Munition.HasForcedOrientation ? "Yes" : "No")<br/>
                <span>Volume: </span> @(Model.Volume.ToString("N1")) <br/>
                <span>Requires Ammo: </span> @(Model.Munition.RequiresAmmo ? "Yes" : "No") <br/>
                @(Model.Munition.RequiresAmmo ? Html.Raw("<span>Ammo Limit: </span>" + Model.Munition.AmmoLimit.ToString("N0") + " <br/>" + 
                                                         (Model.Munition.Hitpoints != 0 ? "<span>Projectile Hitpoints: </span>" + Model.Munition.Hitpoints.ToString("N0") + "<br/>" : String.Empty)) : null)
                @(Html.Raw(munStuff))
            </p>
        </div>
    </div>
    
    <div class="window">
        <h1>Sellpoints</h1>
        <table>
            <thead>
                <tr>
                    <td>
                        <div class="thead-cell">
                            <a href="#"><span>Base Name</span></a>
                        </div>
                    </td>
                    <td>
                        <div class="thead-cell">
                            <a href="#"><span>Price</span></a>
                        </div>
                    </td>
                    <td>
                        <div class="thead-cell">
                            <a href="#"><span>System</span></a>
                        </div>
                    </td>
                    <td>
                        <div class="thead-cell">
                            <a href="#"><span>Faction</span></a>
                        </div>
                    </td>
                    <td>
                        <div class="thead-cell">
                            <a href="#"><span>Location</span></a>
                        </div>
                    </td>
                </tr>
            </thead>
            <tbody>
                @foreach (var i in Sellpoints)
                {
                    string sellpoint = "";
                    string value;
                    try
                    {
                        value = Infocards.FirstOrDefault(x => x.Key == i.Key.Name).Value;
                        sellpoint += "<tr>";
                        sellpoint += $"<td><a href=\"({ViewContext.HttpContext.Request.Host}/base/{i.Key.Nickname})\">{value}</a></td>";
                        sellpoint += $"<td>{(float)i.Value * Model.Price}</td>";
                        sellpoint += $"<td>{Infocards.FirstOrDefault(x => x.Key == systems.First(y => y.Nickname == i.Key.System).Name).Value}</td>";
                        sellpoint += $"<td>{i.Key.OwnerFaction}</td>";
                        sellpoint += $"<td>{Utils.GetGridCode(systems.First(x => x.Nickname == i.Key.System), i.Key.Position, true)}</td>";
                        sellpoint += "</tr>";
                        @Html.Raw(sellpoint)
                    }
                    catch
                    { continue; }
                }
            </tbody>
        </table>
    </div>
</div>